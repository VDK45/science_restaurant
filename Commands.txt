--------- Django ------------ # https://www.djangoproject.com/

# В папке для сайта создать виртуалное окружения (venv):
python -m venv venv

# Запуск venv windows:
.\venv\Scripts\activate
# Запуск venv Linux:
source venv\bin\activate

# Проверка пакетов:
pip list   # Только 2 пакета.

# Выйти из виртуалного окружения.
deactivate

# Open Pycharm - open project
# File - setting - (Project name) - Python interpreteter

# Open terminal - choose PowerShell
pip install django

django-admin

django-admin startproject <name_site>  # <name_site> as name_site.com

cd <name_site>

python manage.py runserver  # Start standard server
python manage.py runserver 4444 # Port 4444
python manage.py runserver 192.168.0.1:4444

# CTRL + C -- stop server

# Create new app
python manage.py startapp controllers # controllers = app name

# Open file: controllers/setting.py add new INSTALLED_APPS ('controllers.apps.ControllersConfig')
# Create Views: controllers/views.py

from django.http import HttpResponse

def home(request):  # HttpRequest
    return HttpResponse("<h1>Страница приложения Home page </h1>")

def index(request):  # HttpRequest
    return HttpResponse("<h1>Страница приложения Index </h1>")

def categories(request):
    return HttpResponse("<h1>Страница приложения Categories </h1>")

# <name_site>.urls.py add new url
from django.urls import path, include
from controllers.views import *

# Mark directory <name_site> as Source Root

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', home),  # http://127.0.0.1:8000/
    path('index/', index),  # http://127.0.0.1:8000/index/
    path('categories/', categories),  # http://127.0.0.1:8000/categories/
]

---------------------------------------------------------------------

# controllers.views.py

from django.http import HttpResponse
from django.shortcuts import render

# Create your views here.


def home(request):  # HttpRequest
    return HttpResponse("<h1>Страница приложения Home page </h1>")


def index(request):  # HttpRequest
    return HttpResponse("<h1>Страница приложения Index </h1>")


def categories(request):
    return HttpResponse("<h1>Страница приложения Categories </h1>")

# <name_site>.urls.py:

from django.contrib import admin
from django.urls import path, include

from controllers.views import *

urlpatterns = [
    path('admin/', admin.site.urls),
    path('science_restaurant/', include('controllers.urls')),
]

# Add new file controllers.urls.py

from django.urls import path
from .views import *

urlpatterns = [
    path('', home),
    path('index/', index),  # http://127.0.0.1:8000/index/
    path('categories/', categories),  # http://127.0.0.1:8000/categories/
]

# Pillow
python -m pip install Pillow

# Migration
python manage.py makemigrations

# Show SQL command for create Table DB
python manage.py sqlmigrate visitor 0001

# Migrate
python manage.py migrate


# ----------- CRUD ----------
# ----------- Add data in base ----------


# Using Interactive Console
python manage.py shell

from controllers.models import Visitor

# Create visitor
Visitor(nik_name='Barack Obama', about='President USA')
v1 = _  # last action

# Commit to base
v1.save()

# PK
v1.pk  # = v1.id

# Show command:
from django.db import connection
connection.queries

# Create visitor
v2 = Visitor(nik_name='Michael Jackson', about='Wolrd actor')
v2.save()

# Create visitor
v3 = Visitor()
v3.nik_name = 'Elon Mask'
v3.about = 'Billionaire USA'
v3.save()

# Object - Manage write
Visitor.objects

# v4 ADDED
v4 = Visitor.objects.create(nik_name='JanCloud Vandam', about='Old Actor')


# v5
Visitor.objects.create(nik_name='Jackie Chan', about='Actor China')

# Show objects
Visitor.objects.all()

# Переопределять метод __str__ class Visitor
    class Visitor(models.Model):
        nik_name = models.CharField(max_length=255)
        about = models.TextField(blank=True)
        photo = models.ImageField(upload_to="photos/%Y/%m/%d/")
        time_create = models.DateTimeField(auto_now_add=True)
        time_update = models.DateTimeField(auto_now=True)
        is_published = models.BooleanField(default=True)

    def __str__(self):
        return self.nik_name, self.about

# Restart Shell
exit()
python manage.py shell

from controllers.models import Visitor
Visitor.objects.all()

list = _
list[0]  # Obama

for lst in list:
    print(lst.nik_name)

Visitor.objects.filter(nik_name='Barack Obama')

from django.db import connection
connection.queries   # Все запросы к базе данных

# Find by pk(id = 3, about='Billionaire USA')
Visitor.objects.filter(pk=3, about='Billionaire USA')

# Find by pk(id >= 2)
Visitor.objects.filter(pk__gte=2)

# Find by pk(id <= 2)
Visitor.objects.filter(pk__lte=2)

# Не включено (id = 2)
Visitor.objects.exclude(pk=2)

# get method - Получим только одну запись всегда
Visitor.objects.get(pk=2)

Visitor.objects.get(pk__gte=2)    # Error
Visitor.objects.get(pk=200)  # Error

# Искать по сортировке в столбце 'about'
Visitor.objects.filter(pk__lte=4).order_by('about')

# Сортировка
Visitor.objects.order_by('nik_name')

# Обратная Сортировка
Visitor.objects.order_by('-time_create')

# --------- Менять записи базы -----------

v4 = Visitor.objects.get(pk=4)
v4.nik_name = 'Jim carrey'
v4.save()

# -------- Delete --------
v = Visitor.objects.filter(pk__lte=2)
v
v.delete()


#  in console & DEBUG = True:
python manage.py collectstatic

* STATIC_URL - Префикс url-адреса  для стаических файлов
* STATIC_ROOT - Путь к общей статичесой папке используемой реальным веб-сервером
* STATICFILES_DIRS - Список доп(нестандартных) путей к статическим файлам, используемых для режима DEBUG

# --------- Создание связей между моделями через класс ForeignKey -------

Foreignkey - Many to one (Поля отношении)
ManyToManyField - Many to many
OneToOneField - one to one

Foreignkey = (< >, on_delete=< >)

models.CASCADE
models.PROTECT
models.SET_NULL
models.SET_DEFAULT
models.SET()
models.DO_NOTHING

# -- Создать новую миграцию (в терминале)

python manage.py makemigrations
python manage.py migrate

# Data base
python manage.py shell

# import all models
from controllers.models import *

# Create news names for Category
Category.objects.create(name='Actors')
Category.objects.create(name='Billionaire')

# Change Visitor cat = 1
v_lst = Visitor.objects.all()
v_lst.update(cat_id=1)

# ------ ADMIN PANEL ---------
# IN terminal

python manage.py createsuperuser

# Open admin.py
from .models import *
admin.site.register(<name_model>)

# add inner class
    class Meta:
        verbose_name = 'Знаменитости'
        verbose_name_plural = 'Знаменитости'
        ordering = ['time_create', 'Поле'] # Сортировка по полю
# verbose_name='NAME'

# ------ Migrate ---------
# In terminal
python manage.py makemigrations
python manage.py migrate

# ------ Create package controllers/<templatetags> -------
# ---- Create templatetags/controllers_tags.py
from django import template
from controllers.models import *


register = template.Library()


@register.simple_tag()
def get_categories():
    return Category.objects.all()

# -------  ORM ---------
# ---- python manage.py shell -----
# ---- from Проект.models import * -----
# ----- from django.db import connection -----
connection.queries

Model.objects.first()  # Первая запись //  Возврашает экземпляр
Model.objects.last()  # Последняя запись //  Возврашает экземпляр
Model.objects.all()   # Все записи //  Возврашает список
Model.objects.all().reverse()   # Все записи в обратном
Model.objects.all()[2:5]   # от 2 до 4
Model.objects.order_by('pk')  # Сортирока по primary keys (pk)
Model.objects.order_by('pk').first()  # Первая запись по Сортироке по primary keys (pk)
Model.objects.order_by('-pk').first()  # Первая запись по обратной Сортироке по primary keys (pk)
Model.objects.filter(pk__lte=2)  #  Сортирока по pk (pk <= 2)
Model.objects.filter(pk__gte=2)  #  Сортирока по pk (pk >= 2)
Model.objects.get(pk=2)  #  Выбрать (pk=2) Возврашает экземпляр а не список
M2 = Model.objects.get(pk=2)
M2.name / M2.title / M2.is_published  # - значения полей записей таблицы
M2.pk / M2.id  # - id
M2.cat # - Foreign key
>>> C1 = Category.objects.get(pk=1)  # Категория = 1
>>> C1.visitor_set.all()    #  Все записи в категории 1
Model.objects.filter(name__contains='фрагмент')  #  найти фрагмент в любом месте
Model.objects.filter(name__icontains='фрагмент')  #  найти фрагмент в любом месте без учета регистра букв
Model.objects.filter(pk__in=[2, 5, 6])  #  найти по значениям
Model.objects.filter(pk__in=[2, 5, 6], is_published=True)  #  найти по 2 условиям
Model.objects.filter(fkeys__in=[2, 5])  #  найти по foreign_keys 2|5
# ----- class q -----
from django.db.models import Q
# ~ Логическое НЕ Priority 1
# & Логическое И Priority 2
# | Логическое ИЛИ Priority 3
Model.objects.filter(Q(pk__lt=5) | Q(cat_id=2))  #  найти записи pk<5 ИЛИ cat_i = 2
Model.objects.filter(Q(pk__lt=5) & Q(cat_id=2))  #  найти записи pk<5 И cat_i = 2
Model.objects.filter(~Q(pk__lt=5) | Q(cat_id=2))  #  найти записи pk>5 ИЛИ cat_i = 2

# ----- Commands for 'time_created' 'time_update'-------
Model.objects.last('time_update')  # Последняя обновлёная запись //  Возврашает экземпляр
Model.objects.earliest('time_update')  # Первая добаленая запись // Возврашает экземпляр
Model.objects.order_by('pk').earliest('time_update')  # Первая добаленая запись по pk

# ----- Next Previous -----
p2 = Model.objects.get(pk=2)
# -- get_previous by time_update --
p2.get_previous_by_time_update()  # Предыдушая запись до p2
p2.get_next_by_time_update()  # Следуюшая запись после p2
p2.get_next_by_time_update(pk__gt=5)  # Следуюшая запись после p2 pk>5

# ----- exists() count() -----
# --- Add new Category -----
Category.objects.create(name='scientists', slug='scientist')
c3 = Category.objects.get(pk=3)
c3.visitor_set.exists()  # Есть ли visitor c pk=3 ??
c3.visitor_set.count()  # Cколько запись с pk=3
#--- example ---
Visitor.objects.filter(pk__gt=2).count()  # Количество записей с pk>2

# ----- Одинакоые зпросы ----
Visitor.objects.filter(cat__slug='actors')  # cat__slug cat в классе Visitor
Visitor.objects.filter(cat__name='Actors')  # cat__slug cat в классе Visitor
Visitor.objects.filter(cat__in=[1])  # cat id = 1

# ------
Visitor.objects.filter(cat__name__contains='act')  # Visitor у которых в Category name есть фрагмент act
# ------
Category.objects.filter(visitor__nik_name__contains='jackie')   # Категория у Visitor с фрагментом 'jackie' в nik_name
Category.objects.filter(visitor__nik_name__contains='a').distinct()  # Уникальные категории у Visitorов с фрагментом 'а' в nik_name

# ---------  Aggregate -------
from django.db.models import *
Visitor.objects.aggregate(Min('cat_id'))
Visitor.objects.aggregate(Max('cat_id'))
Visitor.objects.aggregate(res=Sum('cat_id') - Count('cat_id'))
Visitor.objects.aggregate(res=Avg('cat_id'))
Visitor.objects.filter(pk__gt=4).aggregate(res=Avg('cat_id'))

# ----- Выборка все поля -----
v1 = Visitor.objects.get(pk=1)
v1.nik_name
v1.time_update
v1.about

# ----- Выборка отдельных полей -----
v1 = Visitor.objects.values('nik_name', 'cat_id').get(pk=1)

# ----- Связаные данные ------
Visitor.objects.values('nik_name', 'cat__name').get(pk=1)
Visitor.objects.values('nik_name', 'cat__slug').get(pk=1)

# example:
all = Visitor.objects.values('nik_name', 'cat__name')
for v in all:
    print(f"{v['nik_name']} -- {v['cat__name']}")

# ----------------- annotate ---------
# ---- SELECT count(id) FROM visitor GROUP BY cat_id ---
Visitor.objects.values('cat_id').annotate(Count('id'))
c = Category.objects.annotate(Count('visitor'))
c[0].visitor__count
c[1].visitor__count
c = Category.objects.annotate(total=Count('visitor')).filter(total__gt=0)

# ------ class F -------
from django.db import F
Visitor.objects.filter(pk__gt=F('cat_id'))
# Change cat_id += cat_id
Visitor.objects.filter(slug='private').update(cat_id=F('cat_id')+1)
#
v = Visitor.objects.get(pk=16)
v.cat_id = F('cat_id') + 1
v.save()
v.cat_id

# -------  SQL request -------
all = Visitor.objects.raw('SELECT * FROM controllers_visitor')
for v in all:
    print(v.id, v.nik_name)

#








